// Types
import { ReduxActionType } from '../../interfaces';

// Action Types
import {
  _setIsLoading,
  _incCurrentStep,
  _decCurrentStep,
  _setPayoutAddress,
  _resetPayoutAddress,
  _setExpectedSendAmountFromCurrencyToCurrency,
  _setMinAmount,
  _setCurrencyList,
  _setExpectedReceiveAmountEstimatedArrival,
} from '../types/exchangeForm';

// Initial State
const initialState = {
  currentStep: 0,
  rateMode: 'FLOATING',
  id: 'fdd0ded95b2706',
  status: 'exchanging',
  expectedSendAmount: null,
  expectedReceiveAmount: null,
  payinAddress: '1F1tAaz5x1HUXrCNLbtMDqcw6o5GNn4xqX',
  payoutAddress: null,
  fromCurrency: {
    ticker: 'btc',
    name: '',
  },
  toCurrency: {
    ticker: 'eth',
    name: '',
  },
  estimatedArrival: null,
  contactEmail: null,
  isAmountToCopied: true,
  minAmount: 0,
  currencyList: [],
  fixedRatePairs: [],
  defaultAmounts: {
    btc: 0.1,
    eth: 4,
    xrp: 4000,
    usdt: 900,
    usdterc20: 900,
    bch: 3,
    bsv: 4,
    ltc: 20,
    bnb: 50,
    bnbmainnet: 50,
    eos: 300,
    xtz: 300,
    xlm: 10000,
    link: 200,
    ada: 20000,
    xmr: 10,
    trx: 50000,
    cro: 10000,
    ht: 200,
    etc: 100,
    dash: 10,
    usdc: 900,
    neo: 100,
    atom: 300,
    iota: 5000,
    zec: 20,
    xem: 20000,
    ont: 2000,
    doge: 400000,
    bat: 5000,
    dgb: 50000,
    vet: 200000,
    pax: 900,
    btg: 90,
    busd: 900,
    dcr: 60,
    hbar: 20000,
    qtum: 500,
    lsk: 700,
    icx: 3000,
    zrx: 4000,
    tusd: 900,
    rvn: 40000,
    knc: 1000,
    rep: 80,
    enj: 6000,
    bcd: 2000,
    waves: 800,
    dai: 900,
    omg: 1000,
    sc: 400000,
    nano: 1000,
    mco: 200,
    dgd: 1,
    snt: 40000,
    hot: 2000000,
    steem: 5000,
    kmd: 2000,
    zil: 100000,
    btt: 3000000,
    nexo: 8000,
    matic: 50000,
    lend: 20000,
    ren: 10000,
    zen: 100,
    hc: 800,
    xvg: 300000,
    mana: 30000,
    iost: 200000,
    gnt: 20000,
    xzc: 200,
    elf: 10000,
    ardr: 20000,
    aion: 10000,
    lrc: 30000,
    ae: 7000,
    rcn: 10000,
    powr: 10000,
    strat: 3000,
    npxs: 6000000,
    rlc: 3000,
    band: 800,
    ark: 5000,
    tnt: 20000,
    beam: 2000,
    wtc: 3000,
    eur: 100,
    mtl: 3000,
    pivx: 3000,
    loom: 50000,
    storj: 8000,
    cvc: 40000,
    kan: 400000,
    ppt: 3000,
    bnt: 4000,
    fet: 50000,
    fun: 400000,
    gas: 700,
    sys: 40000,
    eng: 5000,
    grs: 6000,
    husd: 900,
    poly: 40000,
    brd: 7000,
    storm: 700000,
    agi: 60000,
    go: 100000,
    bqx: 30000,
    cnd: 200000,
    mda: 2000,
    celr: 400000,
    wabi: 10000,
    cmt: 100000,
    adx: 10000,
    pay: 20000,
    gto: 200000,
    rdn: 8000,
    sngls: 100000,
    perl: 60000,
    soc: 300000,
    xchf: 900,
    utk: 90000,
    srn: 100000,
    evx: 5000,
    blz: 50000,
    poe: 800000,
    amb: 90000,
    dock: 200000,
    dlt: 30000,
    dnt: 200000,
    snm: 100000,
    vib: 70000,
    vibe: 100000,
    ast: 60000,
    arn: 1,
    lxt: 400000,
    lun: 1000,
    clo: 1000000,
    ong: 9000,
    xaut: 1,
    node: 700000,
    usd: 100,
    gbp: 80,
    cad: 140,
    jpy: 10,
    rub: 7000,
    aud: 150,
    chf: 100,
    czk: 2500,
    dkk: 700,
    nok: 1000,
    nzd: 160,
    pln: 400,
    sek: 1000,
    try: 650,
    zar: 1600,
    huf: 31000,
    ils: 350,
    krw: 120,
  },
  currencyFromSearchString: '',
  currencyToSearchString: '',
  isLoading: false,
  autoFocusAmountField: true,
  isAmountFieldFocused: true,
  amountFieldWarning: null,
  estimateFieldWarning: null,
};

// Reducer
export const exchangeForm = (state = initialState, action: ReduxActionType<any>) => {
  switch (action.type) {
    case _setIsLoading:
      return { ...state, isLoading: true };
    case _incCurrentStep:
      return { ...state, currentStep: state.currentStep + 1 };
    case _decCurrentStep:
      return { ...state, currentStep: state.currentStep - 1 };
    case _setPayoutAddress:
      return { ...state, recipientAddress: action.payload };
    case _resetPayoutAddress:
      return { ...state, recipientAddress: null };
    case _setExpectedSendAmountFromCurrencyToCurrency:
      return {
        ...state,
        expectedSendAmount: action.payload.expectedSendAmount,
        fromCurrency: { ticker: action.payload.fromCurrency, name: '' },
        toCurrency: { ticker: action.payload.toCurrency, name: '' },
      };
    case _setMinAmount:
      return { ...state, minAmount: action.payload.minAmount };
    case _setCurrencyList:
      return { ...state, currencyList: action.payload.currencyList };
    case _setExpectedReceiveAmountEstimatedArrival:
      return {
        ...state,
        expectedReceiveAmount: action.payload.expectedReceiveAmount,
        estimatedArrival: action.payload.estimatedArrival,
      };
    default:
      return { ...state };
  }
};
